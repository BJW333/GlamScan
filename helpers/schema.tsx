/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type FriendStatus = "accepted" | "blocked" | "pending";

export type GenderOption = "female" | "male" | "non_binary" | "prefer_not_to_say";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type NotificationType = "comment" | "friend_accepted" | "friend_request" | "mention" | "message" | "post_like";

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "user";

export interface Comments {
  content: string;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  parentId: number | null;
  postId: number;
  replyCount: Generated<number | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface ConversationParticipants {
  conversationId: number;
  id: Generated<number>;
  joinedAt: Generated<Timestamp | null>;
  leftAt: Timestamp | null;
  userId: number;
}

export interface Conversations {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Friends {
  addresseeId: number;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  requesterId: number;
  status: Generated<FriendStatus>;
  updatedAt: Generated<Timestamp | null>;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface Messages {
  content: string;
  conversationId: number;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  messageType: Generated<string>;
  metadata: Json | null;
  readBy: Generated<Json | null>;
  senderId: number;
  updatedAt: Generated<Timestamp | null>;
}

export interface Notifications {
  createdAt: Generated<Timestamp | null>;
  data: Json | null;
  id: Generated<number>;
  isRead: Generated<boolean | null>;
  message: string;
  title: string;
  type: NotificationType;
  userId: number;
}

export interface OauthAccounts {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  provider: string;
  providerEmail: string;
  providerUserId: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface OauthStates {
  codeVerifier: string;
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: Generated<number>;
  provider: string;
  redirectUrl: string;
  state: string;
}

export interface Posts {
  caption: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  imageUrl: string;
  productTags: Generated<Json | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface SavedItems {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  itemId: number;
  itemType: string;
  userId: number;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface StyleComboItems {
  affiliateUrl: string;
  comboId: number;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  imageUrl: string;
  itemOrder: Generated<number | null>;
  name: string;
  price: Numeric;
}

export interface StyleCombos {
  coverImageUrl: string;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  isSponsored: Generated<boolean | null>;
  occasion: string | null;
  season: string | null;
  shopUrl: string;
  style: string | null;
  title: string;
  totalPrice: Numeric;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  gender: GenderOption | null;
  id: Generated<number>;
  role: Generated<UserRole>;
  stylePreferences: Generated<Json | null>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Votes {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  postId: number;
  userId: number;
  voteType: string;
}

export interface DB {
  comments: Comments;
  conversationParticipants: ConversationParticipants;
  conversations: Conversations;
  friends: Friends;
  loginAttempts: LoginAttempts;
  messages: Messages;
  notifications: Notifications;
  oauthAccounts: OauthAccounts;
  oauthStates: OauthStates;
  posts: Posts;
  savedItems: SavedItems;
  sessions: Sessions;
  styleComboItems: StyleComboItems;
  styleCombos: StyleCombos;
  userPasswords: UserPasswords;
  users: Users;
  votes: Votes;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
export const FriendStatusArrayValues: [FriendStatus, ...FriendStatus[]] = ["accepted","blocked","pending"];
export const NotificationTypeArrayValues: [NotificationType, ...NotificationType[]] = ["comment","friend_accepted","friend_request","mention","message","post_like"];
export const GenderOptionArrayValues: [GenderOption, ...GenderOption[]] = ["female","male","non_binary","prefer_not_to_say"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.